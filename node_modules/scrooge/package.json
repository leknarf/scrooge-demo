{
  "name": "scrooge",
  "version": "0.0.1",
  "dependencies": {
    "aws2js": "0.6.19",
    "express": "2.5.8",
    "walkdir": "0.0.4",
    "jade": "0.26.3",
    "sha1": "0.0.1",
    "mime": "1.2.6"
  },
  "author": {
    "name": "Andrew Frankel",
    "email": "andrew@leknarf.net",
    "url": "http://leknarf.net"
  },
  "readme": "Scrooge is a cache-centric framework for asynchronous web applications.\n\nProject home page: [scrooge.leknarf.net](http://scrooge.leknarf.net)\n\nScrooge is currently alpha software in an early stage of development.\n\nProject goals\n==============\n\n  - All client requests can be handled with or without a running backend server.\n  - Content is served out of Amazon's S3\n  - Requests are submitted as Github gists\n\nArchitecture\n=============\n\nA web page consists of two components: an HTML template and a optional JSON document.\n\nThere are there kinds of web pages:\n\n  1. Completely static pages (just HTML)\n  2. Semi-dynamic pages (template HTML + pre-compiled JSON data)\n  3. Fully-dynamic pages (template HTML + dynamically generated JSON data)\n\nCompletly static web pages are supported by just retrieving a template from S3.\n\nSemi-dynamic web pages require AJAX:\n\n  1. The browser loads the blank template.\n  2. An ajax call retrieves the appropreate JSON document from S3.\n\nFully-dynamic page get interesting:\n\n  1. The browser loads the blank template\n  2. An ajax call from the client checks whether s3://results/my_data.json exists\n    1. If it does not, the client PUTS a blank JSON document to s3://results/my_data_hash.json and a JSON document with the query parameters to s3://requests/my_data_hash.json\n  3. The client now polls S3 and waits for data to be added to s3://results/my_data_hash.json\n    1. The server polls s3://requests/ looking for new requests\n    2. It PUTS the results to s3://results/my_data.json\n    3. It DELETES s3://requests/my_data.json\n  4. The client now retrieves the completed JSON and renders the template, like a semi-dynamic page.\n\nWorker process\n==============\n\n  Workers are responsible for consuming from the submission queue and populating the cache\n\n  1. Polls github gist for requests\n  2. Processes request (business logic)\n  3. Posts results to s3://data/#####.json\n",
  "_id": "scrooge@0.0.1",
  "description": "Scrooge is a cache-centric framework for asynchronous web applications.",
  "dist": {
    "shasum": "ecef23e3745a2fc2bed214cc43f5205bc4646a82"
  },
  "_from": "../scrooge"
}
